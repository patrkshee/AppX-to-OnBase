// Skeleton generated by Hyland Unity Editor on 9/19/2022 2:38:42 PM
// Author: Patrick Sheehan
namespace OITADMEDWSOAPMainGetDocumentsSchedulable
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Net.Http;
    using System.ServiceModel;
    using System.Text;
    using System.Threading.Tasks;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.WorkView;
    using Hyland.Unity.Workflow;
    using XtenderSolutions.Services.TransferObjects;

    using EDW_WebServices;			//For main EDW/AppXtender instance
    //using DORA_EDW_WebServices;	//For DORA EDW/AppXtender instance

    #region Config Class
    /// <summary>
    /// Config class containing session variables
    /// </summary>
    public class Config
    {
        //Workview App and Class Names
        public string wvAppName = "OITADM EDW Migration";               //Name of Workview app for document extraction
        public string wvClsName = "DocumentMetadata";                   //Main AppXtender data class containing docids, data source, etc.
        public string wvClsNameSched = "ScriptManager";                 //Script Manager class for concurrently running multiple instances of script
        public string wvFilterNameSched = "US - Available Schedulers";  //WV filter for available schedulers to run multiple instance of script
        public string wvAttrDocDate = "AppXdate1";                      //Workview Attribute to use for the OnBase document date
                                                                        //public string wvFilterName	= "US - EDW Document Extract 1";//Main WV filter returning AppXtender data - Now specified in Scheduler WV object
                                                                        //public int wvQueryBatchSize 	= 3;							//Max query results to return from EDW filter in Workview - Now specified in Scheduler WV object

        //Workflow/Life Cycle
        public string wfName = "OITADM EDW Document Indexing";			//Life Cycle name for post import work (ie. AFKS indexing, etc.)

        //AppXtender/EDW Web Services Account
        public string appXUser = "USER";
        public string appXPass = "PASSWORD";

        //AppXtender/EDW Config Settings
        public int edwTimeout = 1800;           //1800 for 30 min - Max number of iterations to check if file export is ready from EDW. Each iteration waits <edwWaitTime> milliseconds
        public int edwWaitTime = 1000;          //Number of milliseconds to wait between each iteration when checking for file export completion (1000 = 1 second)
        public int edwMaxByte = 0x50000;        //Default value is "0x1000" for 4KB file chunks at a time
        public int edwStartPosition = 0;        //A 0-based integer value specifying the starting position from which query result items will be returned
        public int edwPageSize = 10;            //An integer value specifying the number of items to return
        public int edwMaxHits = 10;             //An integer value specifying the maximum number of documents to retrieve from the EDW database
        public bool edwSaveQuery = false;
        public bool edwSaveAsPrivate = false;

        //OnBase Config Settings
        public string obFileType = "PDF";                           //File type to pull into OnBase. ex. PDF, Image File Format
        public string kwNameDocId = "OITADM EDW Doc ID";            //OnBase keyword type name to add the EDW Docid value to
        public string kwNameWvObjId = "OITADM EDW WV Obj ID";		//OnBase keyword type name to add the associated Workview Object ID value to. Also matches related item KW mapping in WF for indexing.

        public string sessionTicket = string.Empty;
    }

    #endregion

    /// <summary>
    /// EdwDocument class containing AppXtender/EDW document attributes
    /// </summary>
    public class EdwDocument
    {
        public string wvDataSource = null;      //EDW Data source to search in provided in WV data
        public short wvEdwAppId = 0;            //EDW App ID to search in provided in WV data
        public short wvEdwDocIdCol = 0;         //EDW Column/field number (starting with 1) which contains the docid
        public int wvEdwDocId = 0;              //EDW docid
        public int wvEdwNumobjects = 0;         //EDW numobjects column (# of pages in a doc generally)
        public string wvDocType = null;         //OnBase document type to index document to
        public int wvObjId = 0;                 //Workview Object ID of record representing each AppX document
        public string wvDocDate = null;			//EDW value to assign to the OnBase Document Date
        public string error = null;
        public Stopwatch docTimer = new Stopwatch();
        public string docTime = null;
    }

    /// <summary>
    /// Class containing Workview app, classes, and attributes
    /// </summary>
    public class WorkviewApp
    {
        //Initialize Workview app and class elements
        public WorkView wvModule = null;
        public Hyland.Unity.WorkView.Application wvApp = null;
        public Class wvEdwClass = null;
        public Class wvSchedClass = null;

        //Create Worview Attributes - EDW Extraction Attributes
        public Hyland.Unity.WorkView.Attribute edwExtractedAttr = null;
        public Hyland.Unity.WorkView.Attribute edwExtractErrorAttr = null;
        public Hyland.Unity.WorkView.Attribute edwExtractTimeElapsedAttr = null;
        public Hyland.Unity.WorkView.Attribute edwExtractDTAttr = null;
        public Hyland.Unity.WorkView.Attribute edwFilterName = null;

        //Scheduler Attributes
        public Hyland.Unity.WorkView.Attribute schedFilterName = null;
        public Hyland.Unity.WorkView.Attribute schedBatchSize = null;
        public Hyland.Unity.WorkView.Attribute schedInitDt = null;
        public Hyland.Unity.WorkView.Attribute schedLastRun = null;
        public Hyland.Unity.WorkView.Attribute schedInUse = null;
        public Hyland.Unity.WorkView.Attribute schedDisableOnRun = null;
        public Hyland.Unity.WorkView.Attribute schedEnabledAttr = null;
        //public Hyland.Unity.WorkView.Attribute schedDataSource = null;

        //Attribute values
        public string wvFilterName = null;      //Main WV filter returning AppXtender data - obtained from WV Script Manager
        public int wvBatchSize = 0;             //Workview record count to return (how many AppXtender docs to process in this run)
        public bool wvDisableOnRun = false;     //WV bool to determine whether to mark this scheduler/filter as disabled after executing

        public Hyland.Unity.WorkView.Object objSched = null;
    }


    /// <summary>
    /// OITADM EDW SOAP - Get Documents (Schedulable) - Retrieves specified documents via SOAP web services calls to the EDW/Application Xtender application at OIT.
    /// </summary>
    public class OITADMEDWSOAPGetDocumentsSchedulable : Hyland.Unity.ISchedulableScript
    {
        Config config = new Config();
        EdwDocument edwDoc = new EdwDocument();
        WorkviewApp wvAppCls = new WorkviewApp();

        //Create new EDW/AppXtender Web Service Client
        AxServicesInterfaceSoapClient _service = new EDW_WebServices.AxServicesInterfaceSoapClient(EDW_WebServices.AxServicesInterfaceSoapClient.EndpointConfiguration.AxServicesInterfaceSoap);

        #region ISchedulableScript
        /// <summary>
        /// Implementation of <see cref="ISchedulableScript.OnExecute" />.
        /// <seealso cref="ISchedulableScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnExecute(Hyland.Unity.Application app, Hyland.Unity.SchedulableEventArgs args)
        {
            app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "*** Starting EDW SOAP Script ***");

            Workflow wfModule = app.Workflow;
            LifeCycle wfLC = wfModule.LifeCycles.Find(config.wfName);

            DateTime dt = DateTime.Now;
            app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Date/Time: " + dt.ToString("F"));

            Stopwatch scriptTimer = new Stopwatch();
            scriptTimer.Start();
            string scriptTime = null;
            string docRef = null;
            bool updatedSched = false;

            EDW_WebServices.AxSoapAlerts alerts = null;

            MemoryStream responseStream = new MemoryStream();

            try
            {
                //Query Script Manager in Workview
                Hyland.Unity.WorkView.FilterQueryResultItemList schedQresults = getScriptMgrQueryfromWorkview(app);

                if (schedQresults == null)
                    throw new Exception("Issue encountered while attempting to retrieve query results back from Workview Scheduler");

                wvAppCls.objSched = wvAppCls.wvSchedClass.GetObjectByID(schedQresults[0].ObjectID);
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Workview Scheduler Object ID: " + wvAppCls.objSched);

                //Set scheduler-specific config values from WV attributes
                setSchedValues(app, wvAppCls.objSched.AttributeValues);

                //Lock scheduler WV record
                updatedSched = updateWvSched(app, false);

                if (updatedSched != true)
                    throw new Exception("Issue while attempting to update the Workview scheduler object");

                //Query objects in Workview which will later be used to query against the EDW
                Hyland.Unity.WorkView.FilterQueryResultItemList edwDocQresults = getDocQueryfromWorkview(app);

                if (edwDocQresults == null)
                    throw new Exception("Issue encountered while attempting to retrieve query results back from Workview");

                //Workview results returned from the WV filter. Find each object id to later modify the existing record
                for (int i = 0; i < edwDocQresults.Count; i++)
                {
                    bool validate = false;
                    bool updated = false;

                    //if(i >= config.wvQueryBatchSize)
                    if (i >= wvAppCls.wvBatchSize)
                    {
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Warning, "Terminated Workview query results due to reaching max configured results of " + wvAppCls.wvBatchSize);
                        break;
                    }

                    //Initialize/clear attribute values for this new doc
                    edwDoc = new EdwDocument();
                    edwDoc.docTimer.Reset();

                    Hyland.Unity.WorkView.Object obj = wvAppCls.wvEdwClass.GetObjectByID(edwDocQresults[i].ObjectID);
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, i + ") Workview Object ID: " + obj);

                    //Set doc-specific config values from WV attributes
                    //setConfigValues(app, obj.AttributeValues);
                    setConfigValues(app, obj);

                    //Perform precheck of Workview values
                    validate = precheckWvValues(app);

                    if (validate == false)
                    {
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Warning, "Workview validation failed for this item");

                        //Update Workview object with current status
                        updated = updateWvStatus(app, obj);

                        if (updated != true)
                            throw new Exception("Issue while attempting to update the Workview object.");
                        break;
                    }


                    //Log in to EDW/AppXtender and create session ticket if not already set
                    config.sessionTicket = loginToEDW(app);

                    // Get application field definitions
                    Task<EDW_WebServices.GetApplicationFieldsResponse> axFields = _service.GetApplicationFieldsAsync(config.sessionTicket, edwDoc.wvDataSource, edwDoc.wvEdwAppId);

                    if (axFields.Result == null || axFields == null)
                        app.Diagnostics.Write("No AppXtender field response received!");

                    //This shows up under the undefined tab in Diag Console for some reason:
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "EDW app fields result: " + axFields.Result.GetApplicationFieldsResult);

                    //Execute document query in EDW to retrieve encrypted doc reference for each document
                    AxSearchResults edwQueryResults = queryDocsInEDW(app);

                    if (edwQueryResults == null)
                        throw new Exception("Issue encountered while attempting to execute a query in EDW/AppXtender");

                    //For each EDW document returned from query results
                    for (int ii = 0; ii < edwQueryResults.Count; ii++)
                    {
                        if (ii >= config.edwMaxHits)
                        {
                            app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Warning, "Terminated document query results due to reaching max configured results of " + config.edwMaxHits);
                            break;
                        }

                        //login and create session ticket if not already set
                        config.sessionTicket = loginToEDW(app);

                        AxSearchResultItem doc = (AxSearchResultItem)edwQueryResults.Results[ii];
                        docRef = doc.ObjectReference;

                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "[Doc " + ii + "] Object/Document Reference: " + docRef);
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "[Doc " + ii + "] Doc ID: " + doc.DocId);
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "[Doc " + ii + "] WV Record Doc ID: " + edwDoc.wvEdwDocId);

                        if (doc.DocId != edwDoc.wvEdwDocId)
                            throw new Exception("Mismatched EDW Doc ID detected! Expected Doc ID from WV: " + edwDoc.wvEdwDocId + ", returned Doc ID from EDW: " + doc.DocId);

                        //Start stop watch to time document extraction duration
                        edwDoc.docTimer.Start();

                        //Export document from EDW/AppXtender, receive a job key to check on status
                        Task<EDW_WebServices.ExportDocumentPagesByRefResponse> jobKey = getJobKeyFromEDW(app, docRef);

                        if (jobKey == null)
                            throw new Exception("Issue encountered while attempting to request a document export out of EDW/AppXtender");

                        //Wait and check for file stream availability
                        AxStringArray stringArray = checkDocFromEDW(app, jobKey);

                        //If no value returned break out of this result and continue to next document after recording error
                        if (stringArray == null)
                        {
                            //Force a new session to be created after document failure - AppXtender/EDW didn't return a document within the timeout period
                            logoutEdw(app);
                            break;
                        }

                        //Stream image data from EDW
                        responseStream = streamDocFromEDW(app, stringArray);

                        if (responseStream == null)
                            throw new Exception("Issue encountered while building file stream from AppXtender");

                        //responseStream.Seek(0, SeekOrigin.Begin);
                        responseStream.Position = 0;

                        //Archive new document in OnBase
                        Document newDoc = archiveDoc(app, responseStream);

                        edwDoc.docTimer.Stop();
                        edwDoc.docTime = getTimeElapsed(app, edwDoc.docTimer, "Document");

                        //Confirm new document exists in OnBase
                        if (newDoc == null || newDoc.ID < 1)
                        {
                            //Handle error for document archival problem, then skip to next document
                            string err = docError(app, "OnBase document archival failed.");
                            break;
                        }

                        //Add document to Life Cycle for further processing (indexing, etc.)
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Adding document to life cycle: " + config.wfName);
                        wfModule.AddToLifeCycle(newDoc, wfLC);

                    }   //End of EDW results loop

                    //Update Workview object with current status
                    updated = updateWvStatus(app, obj);

                    if (updated != true)
                        throw new Exception("Issue while attempting to update the Workview object.");

                }   //End of Workview results loop		

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
            }
            finally
            {
                //Since we are done, close the session
                logoutEdw(app);
                scriptTimer.Stop();
                scriptTime = getTimeElapsed(app, scriptTimer, "Script");

                if (wvAppCls.wvBatchSize > 0 && wvAppCls.wvFilterName != null)
                {
                    //Unlock scheduler WV record
                    updatedSched = updateWvSched(app, true);
                }

                config = null;
                edwDoc = null;
                wvAppCls = null;

                if (alerts != null)
                {
                    app.Diagnostics.Write("Alerts: " + alerts.ToString());
                    throw new ApplicationException(alerts.Message);
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "*** End of EDW SOAP script ***");
            }

        }

        #endregion

        #region setWorkviewVars
        /// <summary>
        /// setWorkviewVars function - Sets Workview app, class, and variables
        /// </summary>
        /// <param name="app"></param>
        public void setWorkviewVars(Hyland.Unity.Application app)
        {
            try
            {

                //Get Workview app
                wvAppCls.wvModule = app.WorkView;

                wvAppCls.wvApp = wvAppCls.wvModule.Applications.Find(config.wvAppName);
                if (wvAppCls.wvApp == null)
                {
                    throw new Exception(string.Format("Unable to locate WV App: " + config.wvAppName));
                }

                //Get Workview Class for Schedulers
                wvAppCls.wvSchedClass = wvAppCls.wvApp.Classes.Find(config.wvClsNameSched);
                if (wvAppCls.wvSchedClass == null)
                {
                    throw new Exception(string.Format("Unable to locate WV class: " + config.wvClsNameSched));
                }

                //Get Workview Class
                wvAppCls.wvEdwClass = wvAppCls.wvApp.Classes.Find(config.wvClsName);
                if (wvAppCls.wvEdwClass == null)
                {
                    throw new Exception(string.Format("Unable to locate WV class: " + config.wvClsName));
                }

                //Scheduler Attributes
                wvAppCls.schedFilterName = wvAppCls.wvSchedClass.Attributes.Find("FilterName");
                wvAppCls.schedBatchSize = wvAppCls.wvSchedClass.Attributes.Find("BatchSize");
                wvAppCls.schedInitDt = wvAppCls.wvSchedClass.Attributes.Find("InitiatedDT");
                wvAppCls.schedLastRun = wvAppCls.wvSchedClass.Attributes.Find("LastRun");
                wvAppCls.schedInUse = wvAppCls.wvSchedClass.Attributes.Find("InUse");
                wvAppCls.schedEnabledAttr = wvAppCls.wvSchedClass.Attributes.Find("Enabled");
                wvAppCls.schedDisableOnRun = wvAppCls.wvSchedClass.Attributes.Find("DisableAfterRun");
                //wvAppCls.schedDataSource = wvAppCls.wvSchedClass.Attributes.Find("AppXdatasource");

                //AppXtender/EDW Extraction Attributes
                wvAppCls.edwExtractedAttr = wvAppCls.wvEdwClass.Attributes.Find("extracted");
                wvAppCls.edwExtractErrorAttr = wvAppCls.wvEdwClass.Attributes.Find("ExtractError");
                wvAppCls.edwExtractTimeElapsedAttr = wvAppCls.wvEdwClass.Attributes.Find("ExtractTime");
                wvAppCls.edwExtractDTAttr = wvAppCls.wvEdwClass.Attributes.Find("ExtractDT");
                wvAppCls.edwFilterName = wvAppCls.wvEdwClass.Attributes.Find("FilterName");

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
            }
        }

        #endregion

        #region getScriptMgrQueryfromWorkview
        /// <summary>
        /// getScriptMgrQueryfromWorkview function - Runs a document query in Workview and returns items to then later query against EDW
        /// </summary>
        /// <param name="app"></param>
        /// <returns>Workview filter results for the Script Manager - for running multiple concurrent extractions</returns>
        public Hyland.Unity.WorkView.FilterQueryResultItemList getScriptMgrQueryfromWorkview(Hyland.Unity.Application app)
        {
            try
            {
                //Initialize Workview attributes if not yet initialized
                if (wvAppCls.wvApp == null)
                    setWorkviewVars(app);

                //Check for existing WV objects still needing to be extracted out of EDW									
                Hyland.Unity.WorkView.Filter schedFilter = wvAppCls.wvApp.Filters.Find(config.wvFilterNameSched);
                if (schedFilter == null)
                {
                    throw new Exception("Couldn't locate US filter: " + config.wvFilterNameSched);
                }
                Hyland.Unity.WorkView.FilterQuery schedQ = schedFilter.CreateFilterQuery();
                //schedQ.AddConstraint("Enabled", Hyland.Unity.WorkView.Operator.Equal, true);

                Hyland.Unity.WorkView.FilterQueryResultItemList schedQresults = schedQ.Execute(1);

                if (schedQresults.Count == 0)
                {
                    //No Workview objects were returned from the filter
                    throw new Exception(string.Format("No Workview records were returned from {0} filter!", config.wvFilterNameSched));
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, schedQresults.Count + " Workview objects were returned from filter.");

                return schedQresults;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region getDocQueryfromWorkview
        /// <summary>
        /// getDocQueryfromWorkview function - Runs a document query in Workview and returns items to then later query against EDW
        /// </summary>
        /// <param name="app"></param>
        /// <returns>Workview filter results for AppXtender/EDW documents that haven't yet been extracted</returns>
        public Hyland.Unity.WorkView.FilterQueryResultItemList getDocQueryfromWorkview(Hyland.Unity.Application app)
        {
            try
            {
                //Initialize Workview attributes if not yet initialized
                if (wvAppCls.wvApp == null)
                    setWorkviewVars(app);

                //Check for existing WV objects still needing to be extracted out of EDW									
                Hyland.Unity.WorkView.Filter edwDocFilter = wvAppCls.wvApp.Filters.Find(wvAppCls.wvFilterName);
                if (edwDocFilter == null)
                {
                    throw new Exception("Couldn't locate US filter: " + wvAppCls.wvFilterName);
                }
                Hyland.Unity.WorkView.FilterQuery edwDocQ = edwDocFilter.CreateFilterQuery();
                edwDocQ.AddConstraint("extracted", Hyland.Unity.WorkView.Operator.Equal, false);
                Hyland.Unity.WorkView.FilterQueryResultItemList edwDocQresults = edwDocQ.Execute(wvAppCls.wvBatchSize);

                if (edwDocQresults.Count == 0)
                {
                    //No Workview objects were returned from the filter
                    throw new Exception(string.Format("No Workview records were returned from {0} filter!", wvAppCls.wvFilterName));
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, edwDocQresults.Count + " Workview objects were returned from filter.");

                return edwDocQresults;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region loginToEDW
        /// <summary>
        /// loginToEDW function - Log into EDW/AppXtender, returns session token
        /// </summary>
        /// <param name="app"></param>
        /// <returns>string session ticket from AppXtender</returns>
        public string loginToEDW(Hyland.Unity.Application app)
        {
            try
            {
                //login and create session ticket if not already set
                if (config.sessionTicket == null || config.sessionTicket == "")
                {
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "No session ticket, request a new one");
                }
                else
                {
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Session ticket value: " + config.sessionTicket);
                    return config.sessionTicket;
                }

                //login and create session ticket
                Task<EDW_WebServices.LoginResponse> response = _service.LoginAsync(config.sessionTicket, edwDoc.wvDataSource, config.appXUser, config.appXPass, 0);

                if (response.Exception != null)
                    throw new Exception("Exception: " + response.Exception.Message);

                if (response.Result.LoginResult == null)
                    throw new Exception("Issue encountered while attempting to obtain a login session token from EDW");

                //config.sessionTicket = response.Result.LoginResult;

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "EDW/AppXtender Login Result: " + response.Result.LoginResult);

                return response.Result.LoginResult;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }
        #endregion

        #region logoutEdw
        /// <summary>
        /// logoutEdw function - Log out of EDW/AppXtender
        /// </summary>
        /// <param name="app"></param>
        public void logoutEdw(Hyland.Unity.Application app)
        {
            try
            {
                Task logout = _service.LogoutAsync(config.sessionTicket);

                if (logout.Exception != null)
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error, "Logged out. Exception?: " + logout.Exception);

                config.sessionTicket = null;

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Logged out of EDW");

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
            }
        }

        #endregion

        #region queryDocsInEDW
        /// <summary>
        /// queryDocsInEDW function - Runs a document query in EDW/AppXtender and returns document objects
        /// </summary>
        /// <param name="app"></param>
        /// <returns>AppXtender/EDW query results</returns>
        public AxSearchResults queryDocsInEDW(Hyland.Unity.Application app)
        {
            try
            {

                //Construct query criteria
                AxQueryData queryData = new AxQueryData();
                queryData.Appid = edwDoc.wvEdwAppId;
                queryData.QueryType = AXTypes.QueryType.Normal;

                //		        //queryData.Fields.Add(new AxFieldValue(1, "4011786")); // "Document ID" field (single doc)
                //				queryData.Fields.Add(new AxFieldValue(1, "3201365"));  	// "Document ID" field (multiple docs)
                //		        queryData.Fields.Add(new AxFieldValue(2, ""));  		// "Master ID" field
                //		        queryData.Fields.Add(new AxFieldValue(3, ""));  		// "Doc Type" field
                //				queryData.Fields.Add(new AxFieldValue(4, ""));  		// "DOCUMENT DATE"
                //				queryData.Fields.Add(new AxFieldValue(5, ""));  		// IDENTIFIER
                //				queryData.Fields.Add(new AxFieldValue(6, ""));  		// NAME 1
                //				queryData.Fields.Add(new AxFieldValue(7, ""));  		// SECURITY CODE
                //				queryData.Fields.Add(new AxFieldValue(8, ""));  		// PROCESSED DATE

                //Verify a valid EDW Column number has been specified for where to find the docid
                if (edwDoc.wvEdwDocIdCol < 1 || edwDoc.wvEdwDocIdCol > 20)
                    throw new Exception("The EDW/AppXtender docid column number specified falls outside the accepted range. Ensure you have specified a column number in Workview (starting with 1) for the EDW field that houses the docid");

                //Find the column that houses the EDW docid and set to query filter
                queryData.Fields.Add(new AxFieldValue(edwDoc.wvEdwDocIdCol, edwDoc.wvEdwDocId));

                // Perform the query
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Preparing to execute query");
                Task<EDW_WebServices.QueryDocumentsResponse> xmlData = _service.QueryDocumentsAsync(config.sessionTicket, edwDoc.wvDataSource, SerializerHelper.ToXml(queryData), config.edwStartPosition, config.edwPageSize, config.edwMaxHits, config.edwSaveQuery, config.edwSaveAsPrivate);

                if (xmlData == null)
                    throw new Exception("No data returned from AppXtender/EDW query.");

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Query Doc Result: " + xmlData.Result.QueryDocumentsResult);

                //Deserialize results
                var searchResults = SerializerHelper.FromXml(xmlData.Result.QueryDocumentsResult, typeof(AxSearchResults)) as AxSearchResults;

                if (searchResults.Results.Count == 0)
                    throw new Exception("No documents were found in AppXtender/EDW that matched the query criteria.");

                AxSearchResults axRes = searchResults;

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Document Count: " + axRes.Count);

                return axRes;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region getJobKeyFromEDW
        /// <summary>
        /// getJobKeyFromEDW function - Gets a job key from EDW/AppXtender while it works to export doc
        /// </summary>
        /// <param name="app"></param>
        /// <param name="docRef"></param>
        /// <returns>AppXtender jobkey (used to check for job completion prior to doc retrieval)</returns>
        public Task<EDW_WebServices.ExportDocumentPagesByRefResponse> getJobKeyFromEDW(Hyland.Unity.Application app, string docRef)
        {
            try
            {
                //Export Document Pages, Get preparation job key
                AxDocumentExportData axExportData = new AxDocumentExportData();
                axExportData.Format = AxDocumentExportData.AxExportFormat.PDF;
                axExportData.FormType = AxFormOverlayItem.FormTypes.Image;

                Task<EDW_WebServices.ExportDocumentPagesByRefResponse> jobKey = _service.ExportDocumentPagesByRefAsync(config.sessionTicket, docRef, SerializerHelper.ToXml(axExportData));

                if (jobKey.Exception != null)
                    throw new Exception("Exception thrown while requesting document export: " + jobKey.Exception);

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Preparation job key ID: " + jobKey.Id);                                      //2 digit number
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Preparation job key result: " + jobKey.Result.ExportDocumentPagesByRefResult);   //Job key

                return jobKey;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region checkDocFromEDW
        /// <summary>
        /// checkDocFromEDW function - Checks if a file stream is available from EDW/AppXtender
        /// </summary>
        /// <param name="app"></param>
        /// <param name="jobKey"></param>
        /// <returns>Document result to later be used for streaming back the document from EDW/AppXtender</returns>
        public AxStringArray checkDocFromEDW(Hyland.Unity.Application app, Task<EDW_WebServices.ExportDocumentPagesByRefResponse> jobKey)
        {
            try
            {

                AxStringArray stringArray = null;

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Waiting for document to be prepared by EDW/AppXtender...");

                //Loop until we receive a file
                for (int i = 0; i < config.edwTimeout; i++)
                {
                    //Check on the document page export status
                    Task<EDW_WebServices.GetExportDocumentPagesResultResponse> exportDocPageResults = _service.GetExportDocumentPagesResultAsync(config.sessionTicket, edwDoc.wvDataSource, jobKey.Result.ExportDocumentPagesByRefResult, false);

                    if (exportDocPageResults.Exception != null)
                        throw new Exception("Exporting document pages failed: " + exportDocPageResults.Exception);

                    if (i % 10 == 0)
                    {
                        app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Iteration #" + i + " - Export page results check ID: " + exportDocPageResults.Id);
                    }

                    //TODO: Account for "One or more errors occurred" error at next line - marks as completed, but fails to import doc
                    stringArray = SerializerHelper.FromXml(exportDocPageResults.Result.GetExportDocumentPagesResultResult, typeof(AxStringArray)) as AxStringArray;

                    //If we received an item back, break out of the loop to process
                    if (stringArray != null && stringArray.Items.Count > 0)
                    {
                        break;
                    }

                    //Wait provided number of milliseconds between each iteration before checking again
                    System.Threading.Thread.Sleep(config.edwWaitTime);
                }

                if (stringArray == null || stringArray.Items.Count == 0)
                {
                    //throw new Exception("Document export request didn't return any documents within the timeout period of " + config.edwWaitTime + " milliseconds and " + config.edwTimeout + " cycles.");

                    //Handle error for outlier files that are too large
                    string err = docError(app, "EDW document export request didn't return within the set timeout period (" + config.edwWaitTime + "ms, " + config.edwTimeout + " cycles).");

                    if (err == null)
                        throw new Exception("Error generating error message for document " + edwDoc.wvEdwDocId);

                    return null;
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "String array count: " + stringArray.Items.Count);

                return stringArray;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region streamDocFromEDW
        /// <summary>
        /// streamDocFromEDW function - Streams a file from EDW/AppXtender back to OnBase
        /// </summary>
        /// <param name="app"></param>
        /// <param name="stringArray"></param>
        /// <returns>Memory stream of requested document from EDW/AppXtender</returns>
        public MemoryStream streamDocFromEDW(Hyland.Unity.Application app, AxStringArray stringArray)
        {
            MemoryStream responseStream = new MemoryStream();

            try
            {
                //Create AX Image Stream Data Object
                AxImageStreamData streamData = new AxImageStreamData();
                streamData.StartByte = 0;
                streamData.MaxByte = config.edwMaxByte;
                //streamData.MaxByte = 0x1000;	//4KB at a time
                //streamData.MaxByte = 0x50000;

                //TODO: more than one result/page?
                Task<EDW_WebServices.DownloadImageStreamResponse> downloadStreamResults = _service.DownloadImageStreamAsync(config.sessionTicket, edwDoc.wvDataSource, (string)stringArray.Items[0], SerializerHelper.ToXml(streamData));

                if (downloadStreamResults.Exception != null)
                    throw new Exception("Download image stream failed");

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Download Image Stream Result: " + downloadStreamResults.Result.DownloadImageStreamResult);

                //Convert the image data to a stream result object
                AxStreamResult streamRes = SerializerHelper.FromXml(downloadStreamResults.Result.DownloadImageStreamResult, typeof(AxStreamResult)) as AxStreamResult;

                //Track total file size as each chunk is received
                int fileSize = streamRes.ByteAmount;
                int count = 0;

                //responseStream.Write(streamRes.ImageBytes, 0, 4096);
                responseStream.Write(streamRes.ImageBytes, 0, streamRes.ByteAmount);

                //While there is still data to stream
                while (streamRes.IsContinue)
                {
                    streamData.StartByte += streamRes.ByteAmount;
                    downloadStreamResults = _service.DownloadImageStreamAsync(config.sessionTicket, edwDoc.wvDataSource, (string)stringArray.Items[0], SerializerHelper.ToXml(streamData));

                    if (downloadStreamResults.Exception != null)
                        throw new Exception("Download image stream failed");

                    //Convert the XML doc to stream result
                    streamRes = SerializerHelper.FromXml(downloadStreamResults.Result.DownloadImageStreamResult, typeof(AxStreamResult)) as AxStreamResult;
                    responseStream.Write(streamRes.ImageBytes, 0, streamRes.ByteAmount);

                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, count + ":) Bytes: " + streamRes.ByteAmount + " / file size: " + fileSize);

                    fileSize += streamRes.ByteAmount;
                    count += 1;
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Total file Size: " + fileSize);
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Stream capacity = {0}, Stream length = {1}",
                    responseStream.Capacity.ToString(),
                    responseStream.Length.ToString()
                );

                return responseStream;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region archiveDoc
        /// <summary>
        /// archiveDoc function - Archives a new document in OnBase
        /// </summary>
        /// <param name="app"></param>
        /// <param name="stream"></param>
        /// <returns>Document object of newly created document in OnBase</returns>
        public Document archiveDoc(Hyland.Unity.Application app, MemoryStream stream)
        {
            try
            {
                Storage storage = app.Core.Storage;

                // Set doc type
                DocumentType docType = app.Core.DocumentTypes.Find(edwDoc.wvDocType);

                // Set file type 
                FileType fileType = app.Core.FileTypes.Find(config.obFileType);

                PageData pData = storage.CreatePageData(stream, "pdf");

                StoreNewDocumentProperties docProps = storage.CreateStoreNewDocumentProperties(docType, fileType);

                // Add editable keyword record to storage properties
                // TODO: AFKS to fill the remaining keyword values (outside of script)
                // TODO: Unique ID for multiple apps (appid.docid)?
                docProps.AddKeyword(config.kwNameDocId, edwDoc.wvEdwDocId);
                docProps.AddKeyword(config.kwNameWvObjId, edwDoc.wvObjId);
                if (edwDoc.wvDocDate != null)
                {
                    docProps.DocumentDate = DateTime.Parse(edwDoc.wvDocDate);
                }

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Preparing to archive document in OnBase.");

                Document newDoc = storage.StoreNewDocument(pData, docProps);

                if (newDoc == null || newDoc.ID < 1)
                {
                    //Handle error for document archival problem
                    string err = docError(app, "Issue while attempting to archive new document.");

                    if (err == null)
                        throw new Exception("Error generating error message for document " + edwDoc.wvEdwDocId);

                    return null;
                }

                app.Diagnostics.Write(string.Format("Uploaded new document, doc handle: {0}, date stored: {1}", newDoc.ID, newDoc.DateStored));

                return newDoc;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write("Error while attempting to archive new document in OnBase.");
                app.Diagnostics.Write(ex);
                return null;
            }
        }

        #endregion

        #region updateWvSched
        /// <summary>
        /// updateWvSched function - Update Workview scheduler record
        /// </summary>
        /// <param name="app"></param>
        /// <param name="obj"></param>
        /// <param name="finished"></param>
        /// <returns>Boolean, True if Workview was successfully updated</returns>
        public bool updateWvSched(Hyland.Unity.Application app, bool finished)
        {
            try
            {

                AttributeValueModifier valMod = wvAppCls.objSched.CreateAttributeValueModifier();

                //If disable after run is checked, uncheck the enabled checkbox
                if (wvAppCls.wvDisableOnRun)
                {
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Setting " + wvAppCls.wvFilterName + " scheduler to disabled");
                    valMod.SetAttributeValue(wvAppCls.schedEnabledAttr, false);
                }

                if (finished)
                {
                    //Unlock this scheduler record and record date/time
                    valMod.SetAttributeValue(wvAppCls.schedLastRun, DateTime.Now);
                    valMod.SetAttributeValue(wvAppCls.schedInUse, false);
                }
                else
                {
                    //Lock this scheduler record to begin processing
                    valMod.SetAttributeValue(wvAppCls.schedInitDt, DateTime.Now);
                    valMod.SetAttributeValue(wvAppCls.schedInUse, true);
                }

                //Store the changes to the Object (and database).
                valMod.ApplyChanges();
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Applied WV scheduler attribute values.");

                return true;
            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return false;
            }
        }

        #endregion

        #region updateWvStatus
        /// <summary>
        /// updateWvStatus function - Update Workview object with extraction status
        /// </summary>
        /// <param name="app"></param>
        /// <param name="obj"></param>
        /// <returns>Boolean, True if Workview was successfully updated</returns>
        public bool updateWvStatus(Hyland.Unity.Application app, Hyland.Unity.WorkView.Object obj)
        {
            try
            {
                //Set this Workview object as extracted upon successful extraction and OnBase import
                AttributeValueModifier valMod = obj.CreateAttributeValueModifier();
                valMod.SetAttributeValue(wvAppCls.edwExtractedAttr, true);
                valMod.SetAttributeValue(wvAppCls.edwExtractDTAttr, DateTime.Now);
                valMod.SetAttributeValue(wvAppCls.edwFilterName, wvAppCls.wvFilterName);

                if (edwDoc.error != null)
                {
                    //Add error message if extraction failed for this document
                    valMod.SetAttributeValue(wvAppCls.edwExtractErrorAttr, edwDoc.error);
                    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Recording document error in WV: \n" + edwDoc.error);
                }

                if (edwDoc.docTime != null)
                {
                    //Add time elapsed for document extraction
                    valMod.SetAttributeValue(wvAppCls.edwExtractTimeElapsedAttr, edwDoc.docTime);
                    edwDoc.docTime = null;
                }
                else
                {
                    edwDoc.docTimer.Stop();
                    edwDoc.docTime = getTimeElapsed(app, edwDoc.docTimer, "Document");
                    valMod.SetAttributeValue(wvAppCls.edwExtractTimeElapsedAttr, edwDoc.docTime);
                }

                //Store the changes to the Object (and database).
                valMod.ApplyChanges();
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Applied WV attribute values.");
                return true;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return false;
            }
        }

        #endregion

        #region setConfigValues
        /// <summary>
        /// setConfigValues function - Sets config values from WV attributes
        /// </summary>
        /// <param name="app"></param>
        /// <param name="obj"></param>
        public void setConfigValues(Hyland.Unity.Application app, Hyland.Unity.WorkView.Object obj)
        {
            try
            {
                AttributeValueList attrList = obj.AttributeValues;

                //Set EDW configs based on EDW records in Workview
                edwDoc.wvDataSource = attrList.Find("AppXdatasource").AlphanumericValue;
                edwDoc.wvEdwAppId = (short)attrList.Find("AppXappid").IntegerValue;
                edwDoc.wvEdwDocId = (int)attrList.Find("AppXdocid").IntegerValue;
                edwDoc.wvEdwDocIdCol = (short)attrList.Find("AppXdocidColNum").IntegerValue;
                edwDoc.wvEdwNumobjects = attrList.Find("AppXnumobjects").HasValue == true ? (int)attrList.Find("AppXnumobjects").IntegerValue : 0;
                edwDoc.wvObjId = (int)obj.ID;

                if (edwDoc.wvEdwDocIdCol < 1)
                    throw new Exception("DocId column is invalid. Ensure you have specified a proper column to find the EDW DocId. This should match the field<#> from the AppXtender ae_dt table.");

                //TODO: Determine what to do with unmatched OnBase Doc Types
                edwDoc.wvDocType = attrList.Find("OBdoctype").HasValue == true ? attrList.Find("OBdoctype").AlphanumericValue : null;
                edwDoc.wvDocDate = attrList.Find(config.wvAttrDocDate).HasValue == true ? attrList.Find(config.wvAttrDocDate).DateValue.ToString() : DateTime.Today.ToString();

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, attrList.Count + " attributes found.");
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "EDW docid: " + attrList.Find("AppXdocid"));
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, string.Format("EDW data source: {0}\nEDW appid: {1}\nEDW extracted?: {2}\nDoc Type: {3}\n# of objects: {4}",
                    edwDoc.wvDataSource, edwDoc.wvEdwAppId, attrList.Find("extracted"), edwDoc.wvDocType, edwDoc.wvEdwNumobjects));

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
            }
        }

        #endregion

        #region setSchedValues
        /// <summary>
        /// setSchedValues function - Sets Scheduler values from WV attributes
        /// </summary>
        /// <param name="app"></param>
        /// <param name="attrList"></param>
        public void setSchedValues(Hyland.Unity.Application app, AttributeValueList attrList)
        {
            try
            {

                //Set Scheduler records in Workview
                wvAppCls.wvFilterName = attrList.Find("FilterName").AlphanumericValue;  //This filters down what document ranges to extract to prevent multiple instances of the script from interfering with one another
                wvAppCls.wvBatchSize = (int)attrList.Find("BatchSize").IntegerValue;
                wvAppCls.wvDisableOnRun = attrList.Find("DisableAfterRun").BooleanValue;

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, attrList.Count + " attributes found.");
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Scheduler Filter Name: " + wvAppCls.wvFilterName);
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Verbose, "Scheduler Batch Size: " + wvAppCls.wvBatchSize);

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
            }
        }

        #endregion

        #region docError
        /// <summary>
        /// docError function - Returns error message for failed document extraction
        /// </summary>
        /// <param name="app"></param>
        /// <param name="err"></param>
        /// <returns>Error message for failed document extraction</returns>
        public string docError(Hyland.Unity.Application app, string err)
        {
            try
            {
                edwDoc.error = string.Format("ERROR: {0} \nEDW Docid: {1}", err, edwDoc.wvEdwDocId);
                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Warning, edwDoc.error);

                return edwDoc.error;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                return null;
            }

        }

        #endregion

        #region precheckWvValues
        /// <summary>
        /// precheckWvValues function - Checks for invalid Workview data prior to extraction
        /// </summary>
        /// <param name="app"></param>
        /// <returns>Boolean, true if passed validation</returns>
        public bool precheckWvValues(Hyland.Unity.Application app)
        {
            try
            {

                bool valid = true;
                string err = null;

                if (edwDoc.wvDocType == null)
                {
                    //Handle error for no specified OnBase document type
                    err = docError(app, "No OnBase document type provided. Document was not extracted.");
                    valid = false;
                }

                if (edwDoc.wvEdwDocId < 1)
                {
                    //Handle error for no specified OnBase document type
                    err = docError(app, "No AppXtender Docid provided. Document was not extracted.");
                    valid = false;
                }

                return valid;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                string err = docError(app, "Error occurred during Workview precheck.");
                return false;
            }

        }

        #endregion

        #region getTimeElapsed
        /// <summary>
        /// getTimeElapsed function - Returns the formatted timespan from the Stop Watch
        /// </summary>
        /// <param name="app"></param>
        /// <param name="stopWatch">Stop Watch</param>
        /// <param name="timerDesc">Description of Stop Watch</param>
        /// <returns>Formatted elapsed time from the Stop Watch</returns>
        public string getTimeElapsed(Hyland.Unity.Application app, Stopwatch stopWatch, string timerDesc)
        {
            try
            {
                //stopWatch.Stop();

                // Get the elapsed time as a TimeSpan value.
                TimeSpan ts = stopWatch.Elapsed;

                // Format and display the TimeSpan value.
                string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
                    ts.Hours, ts.Minutes, ts.Seconds,
                    ts.Milliseconds / 10);

                app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, timerDesc + " run time: " + elapsedTime);

                return elapsedTime;

            }
            catch (Exception ex)
            {
                app.Diagnostics.Write(ex);
                string err = docError(app, "Error occurred while returning timespan from the Stop Watch.");
                return null;
            }
        }

        #endregion

    }
}